BASIC PROGRAM

package corejava.concepts.basics;

public class HelloWorld 
{
	public static void main(String[] args) 
        {
		System.out.println("Hello World");
	}
}

class  : keyword is used to declare a class in java.

public : is an Access Modifier, which defines who can access this Method. 
         Public means that this Method will be accessible everywhere, by other classes.

static : is a keyword which identifies the class related thing. 
         This means the given Method or variable is not instance related but Class related. 
         It can be accessed without creating the instance of a Class.

void : is used to define the Return Type of the Method. 
       It defines what the method can return. 
       Void means the Method will not return any value.
	
main: is the name of the Method. 
      This Method name is searched by JVM as a starting point for an application 
      with a particular signature only.

String args[] : is the parameter to the main Method.


Question- Can we have multiple main() methods in java?
The answer is yes but the parameter needs to be different.

Not possible
public static void main(String[] args){}
public static void main(String[] args){}

Possible
public static void main(String[] args){}
public static void main(int i){}

public static void main(String[] args){} - Will be recognized as the main method by JVM always.


=================================================================================================

System is a class = public final class System{} 
out is a variable = public final static PrintStream out = null;
println is a method in System class

public void println(String x) {
        synchronized (this) {
            print(x);
            newLine();
        }
    }

================================================================================================
CREATING OBJECTS IN JAVA

We can create object in 5 different ways

1. Using 'new' keyword
NewKeywordExample obj = new NewKeywordExample();
System.out.println(obj.name);


2. Using 'newInstance' keyword
MyAppClass appObj = (MyAppClass)sampleObj.newInstance(); 
System.out.println(obj.name);


3. Using clone() method: 
CloneExample obj1 = new CloneExample();
CloneExample obj2 = (CloneExample) obj1.clone();
System.out.println(obj2.name);

4. Class.forName() : / Reflection 
This approach is also known as way of creating an object using reflection API. 
This simply returns the Class object associated with the class given. 
Commonly used in JDBC connection. 
SampleClass sampleObj = Class.forName("SampleClass") 

5. Using object serialization 
ObjectInputStream inStream = new ObjectInputStream(anInputStream ); 
MyObject object = (MyObject) inStream.readObject();



====================================================================================================
ABSTRACT CLASS 

A class that is declared with abstract keyword, 
is known as abstract class in java. 
It can have abstract and non-abstract methods (method with body).

abstract class Bank
{    
   abstract int getRateOfInterest();    
}  

class SBI extends Bank
{    
int getRateOfInterest(){return 7;}    
}    

class PNB extends Bank
{    
int getRateOfInterest(){return 8;}    
}     

class TestBank
{    
public static void main(String args[]){    
Bank b;  
b=new SBI();  
System.out.println("Rate of Interest is: "+b.getRateOfInterest()+" %");    
b=new PNB();  
System.out.println("Rate of Interest is: "+b.getRateOfInterest()+" %");    
}}     



=================================================================================================

SUPER KEYWORD

The super keyword in java is a reference variable which is used to refer immediate parent class object.

class Animal
{  
  String color="white";  
}  

class Dog extends Animal
{  
        String color="black";  
	void printColor()
	{  
	System.out.println(color);//prints color of Dog class  
	System.out.println(super.color);//prints color of Animal class  
	}  
}  

class TestSuper1
{  
   public static void main(String args[])
    {  
       Dog d=new Dog();  
       d.printColor();  
    }
}  


======================================================================================================

ENUM KEYWORD

Enum in java is a data type that contains fixed set of constants.

It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY and SATURDAY) , 
directions (NORTH, SOUTH, EAST and WEST) etc. 
The java enum constants are static and final implicitly. It is available from JDK 1.5.


class EnumExample1
{  
	public enum Season 
        { WINTER, SPRING, SUMMER, FALL }  
  
	public static void main(String[] args) 
	{  
		for (Season s : Season.values())  
		System.out.println(s);  
  	}
}  

======================================================================================================

THIS keyword

There can be a lot of usage of java this keyword. 
In java, this is a reference variable that refers to the current object.


class Student
{  
	int rollno;  
	String name;  
	float fee;  
	Student(int rollno,String name,float fee)
	{  
	this.rollno=rollno;  
	this.name=name;  
	this.fee=fee;  
	}  
	void display()
	{
	System.out.println(rollno+" "+name+" "+fee);
	}  
}  
  
class TestThis2
{  
	public static void main(String args[])
	{  
		Student s1=new Student(111,"ankit",5000f);  
		Student s2=new Student(112,"sumit",6000f);  
		s1.display();  
		s2.display();  
	}
}  

In the above example, parameters (formal arguments) and instance variables are same. 
So, we are using this keyword to distinguish local variable and instance variable.


============================================================================================

FINAL keyword

The final keyword in java is used to restrict the user. 
The java final keyword can be used in many context. Final can be:
variable
method
class

//Final Variable Demo
class Bike9{  
 final int speedlimit=90;//final variable  
 void run(){  
  speedlimit=400;  
 }  
 public static void main(String args[]){  
 Bike9 obj=new  Bike9();  
 obj.run();  
 }  
}//end of class  
OUTPUT - Compile error as final variable can't be overriden


//Final Method Demo
class Bike{  
  final void run(){System.out.println("running");}  
}  
     
class Honda extends Bike{  
   void run(){System.out.println("running safely with 100kmph");}  
     
   public static void main(String args[]){  
   Honda honda= new Honda();  
   honda.run();  
   }  
}  
OUTPUT - Compile error as final method can't be overriden


//Final Class Demo
final class Bike{}  
  
class Honda1 extends Bike{  
  void run(){System.out.println("running safely with 100kmph");}  
    
  public static void main(String args[]){  
  Honda1 honda= new Honda1();  
  honda.run();  
  }  
}  
OUTPUT - Compile error as final class can't be extended

================================================================================================

COLLECTIONS - An architecture to store and manipulate the group of objects.

List (Array List, linked list) - Allows duplicates
Set (Hash set, Tree set) - Doesn't allow duplicates
Map (key and value pair)


Array List
----------
public class ArrayList<E> extends AbstractList<E>
implements List<E>, RandomAccess, Cloneable, java.io.Serializable


ArrayList (class)-> extends
Abstract List (class) -> extends
AbstractCollection (class) -> Implements
Collection (interface) -> extends
Iterable (interface)


//Creating arraylist  
ArrayList<String> list=new ArrayList<String>();
		
//Adding object in arraylist  
list.add("Ravi");
list.add("Vijay");  
list.add("Ravi");  
list.add("Ajay");  
		
//Traversing list through Iterator  
Iterator itr=list.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
 

LinkedList
-----------
public class LinkedList<E>
extends AbstractSequentialList<E>
implements List<E>, Deque<E>, Cloneable, java.io.Serializable


LinkedList<String> al=new LinkedList<String>();
al.add("Ravi");
al.add("Vijay");
al.add("Ravi");
al.add("Ajay");

Iterator<String> itr=al.iterator();
while(itr.hasNext()){
System.out.println(itr.next());


Hash set
--------
HashSet class is used to create a collection that uses a hash table for storage.
Unique but not sorted 

HashSet<String> set=new HashSet<String>();  
  set.add("Ravi");  
  set.add("Vijay");  
  set.add("Ravi");  
  set.add("Ajay");  
  //Traversing elements  
  Iterator<String> itr=set.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  


Tree Set
---------
Stores unique value and in ascending order

TreeSet<String> al=new TreeSet<String>();  
  al.add("Ravi");  
  al.add("Vijay");  
  al.add("Ravi");  
  al.add("Ajay");  
  //Traversing elements  
  Iterator<String> itr=al.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  

MAP
-----
A map contains values on the basis of key i.e. key and value pair. 
Each key and value pair is known as an entry. Map contains only unique keys.

 Map<Integer,String> map=new HashMap<Integer,String>();  
  map.put(100,"Amit");  
  map.put(101,"Vijay");  
  map.put(102,"Rahul");  
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  


How to sort in collections?

ArrayList<String> al=new ArrayList<String>();  
al.add("Viru");  
al.add("Saurav");  
al.add("Mukesh");  
al.add("Tahir");  
  
Collections.sort(al);  

=======================================================================

STRINGS

String s1= new String("India");

1.	char charAt(int index): It returns the character at the specified index. Specified index value should be between 0 to length() -1 both inclusive. It throws IndexOutOfBoundsException if index<0||>= length of String.
2.	boolean equals(Object obj): Compares the string with the specified string and returns true if both matches else false.
3.	boolean equalsIgnoreCase(String string): It works same as equals method but it doesn’t consider the case while comparing strings. It does a case insensitive comparison.
4.	int compareTo(String string): This method compares the two strings based on the Unicode value of each character in the strings.
5.	int compareToIgnoreCase(String string): Same as CompareTo method however it ignores the case during comparison.
6.	boolean startsWith(String prefix, int offset): It checks whether the substring (starting from the specified offset index) is having the specified prefix or not.
7.	boolean startsWith(String prefix): It tests whether the string is having specified prefix, if yes then it returns true else false.
8.	boolean endsWith(String suffix): Checks whether the string ends with the specified suffix.
9.	int hashCode(): It returns the hash code of the string.
10.	int indexOf(int ch): Returns the index of first occurrence of the specified character ch in the string.
11.	int indexOf(int ch, int fromIndex): Same as indexOf method however it starts searching in the string from the specified fromIndex.
12.	int lastIndexOf(int ch): It returns the last occurrence of the character ch in the string.
13.	int lastIndexOf(int ch, int fromIndex): Same as lastIndexOf(int ch) method, it starts search from fromIndex.
14.	int indexOf(String str): This method returns the index of first occurrence of specified substring str.
15.	int lastindexOf(String str): Returns the index of last occurrence of string str.
16.	String substring(int beginIndex): It returns the substring of the string. The substring starts with the character at the specified index.
17.	String substring(int beginIndex, int endIndex): Returns the substring. The substring starts with character at beginIndex and ends with the character at endIndex.
18.	String concat(String str): Concatenates the specified string “str” at the end of the string.
19.	String replace(char oldChar, char newChar): It returns the new updated string after changing all the occurrences of oldChar with the newChar.
20.	boolean contains(CharSequence s): It checks whether the string contains the specified sequence of char values. If yes then it returns true else false. It throws NullPointerException of ‘s’ is null.
21.	String toUpperCase(Locale locale): Converts the string to upper case string using the rules defined by specified locale.
22.	String toUpperCase(): Equivalent to toUpperCase(Locale.getDefault()).
23.	public String intern(): This method searches the specified string in the memory pool and if it is found then it returns the reference of it, else it allocates the memory space to the specified string and assign the reference to it.
24.	public boolean isEmpty(): This method returns true if the given string has 0 length. If the length of the specified Java String is non-zero then it returns false.
25.	public static String join(): This method joins the given strings using the specified delimiter and returns the concatenated Java String
26.	String replaceFirst(String regex, String replacement): It replaces the first occurrence of substring that fits the given regular expression “regex” with the specified replacement string.
27.	String replaceAll(String regex, String replacement): It replaces all the occurrences of substrings that fits the regular expression regex with the replacement string.
28.	String[] split(String regex, int limit): It splits the string and returns the array of substrings that matches the given regular expression. limit is a result threshold here.
29.	String[] split(String regex): Same as split(String regex, int limit) method however it does not have any threshold limit.
30.	String toLowerCase(Locale locale): It converts the string to lower case string using the rules defined by given locale.
31.	public static String format(): This method returns a formatted java String
32.	String toLowerCase(): Equivalent to toLowerCase(Locale. getDefault()).
33.	String trim(): Returns the substring after omitting leading and trailing white spaces from the original string.
34.	char[] toCharArray(): Converts the string to a character array.
35.	static String copyValueOf(char[] data): It returns a string that contains the characters of the specified character array.
36.	static String copyValueOf(char[] data, int offset, int count): Same as above method with two extra arguments – initial offset of subarray and length of subarray.
37.	void getChars(int srcBegin, int srcEnd, char[] dest, int destBegin): It copies the characters of srcarray to the dest array. Only the specified range is being copied(srcBegin to srcEnd) to the dest subarray(starting fromdestBegin).


================================================================================================

STRING BUFFER

StringBuffer is a peer class of String that provides much of the functionality of strings. 
String represents fixed-length, immutable character sequences while StringBuffer represents growable 
and writable character sequences.

StringBuffer may have characters and substrings inserted in the middle or appended to the end. 
It will automatically grow to make room for such additions and often has more characters preallocated 
than are actually needed, to allow room for growth.

StringBuffer Constructors

StringBuffer( ): It reserves room for 16 characters without reallocation.

 StringBuffer s=new StringBuffer("GeeksforGeeks");
 int p=s.length();
 int q=s.capacity();
 System.out.println("Length of string GeeksforGeeks="+p); //Returns=13
 System.out.println("Capacity of string GeeksforGeeks="+q); //Returns=29
 s.append("1");
 System.out.println(s); //returns GeeksforGeeks1


=================================================================================================

STRING BUILDER

Java StringBuilder class is used to create mutable (modifiable) string. 
The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. 
It is available since JDK 1.5.

StringBuilder sb=new StringBuilder("Hello ");  
sb.append("Java");//now original string is changed  
System.out.println(sb);//prints Hello Java  


==================================================================================================

STRING BUFFER / BUILDER METHODS

sb.append("Java"); - Adds the string Java at the last of the original string
sb.insert(1,"Java"); - inserts the string 'java' at the position specified
sb.replace(1,3,"Java");  - replaces the given string from the specified beginIndex and endIndex.
sb.delete(1,3); - It deletes the string from the specified beginIndex to endIndex.
sb.reverse(); - reverses the current string.
sb.capacity()); - returns the current capacity of the buffer. The default capacity of the buffer is 16
                  If the number of character increases from its current capacity, it increases the capacity by (oldcapacity*2)+2

sb.ensureCapacity(10); - ensures that the given capacity is the minimum to the current capacity.


==================================================================================================

REGULAR EXPRESSION
